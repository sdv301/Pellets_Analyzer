# ai_ml_integration.py
import pandas as pd
import numpy as np
import json
from ml_optimizer import ml_system
from database import query_db
from ai_integration import ask_ai

class AIMLAnalyzer:
    def __init__(self):
        self.ml_system = ml_system  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–µ—Å—å —Ç–æ–∂–µ
    
    def get_data_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            status = self.ml_system.get_system_status()
            return {
                'total_samples': status.get('training_data_size', 0),
                'trained_models': len(status.get('trained_models', [])),
                'available_components': status.get('available_components', [])
            }
        except Exception as e:
            return {'error': str(e)}
    
    def get_ml_models_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π"""
        try:
            status = self.ml_system.get_system_status()
            return {
                'is_trained': status.get('is_trained', False),
                'models_count': len(status.get('trained_models', [])),
                'models': status.get('trained_models', [])
            }
        except Exception as e:
            return {'error': str(e)}
    
    def analyze_trends_with_ml(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–µ–π"""
        trends = {}
        
        if not self.ml_optimizer.models:
            return {"error": "ML –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã"}
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞
        component_impact = {}
        for prop in self.ml_optimizer.models.keys():
            if 'feature_importance' in self.ml_optimizer.models[prop]:
                importance = self.ml_optimizer.models[prop]['feature_importance']
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
                sorted_impact = sorted(importance.items(), key=lambda x: x[1], reverse=True)
                component_impact[prop] = sorted_impact[:3]  # –¢–æ–ø-3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        trends['component_impact'] = component_impact
        
        # –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
        optimal_compositions = {}
        for prop in ['q', 'kf']:  # –¢–µ–ø–ª–æ—Ç–∞ —Å–≥–æ—Ä–∞–Ω–∏—è –∏ –ø—Ä–æ—á–Ω–æ—Å—Ç—å
            if prop in self.ml_optimizer.models:
                try:
                    result = self.ml_optimizer.optimize_composition(prop, maximize=True)
                    if result['success']:
                        optimal_compositions[prop] = result['composition']
                except:
                    pass
        
        trends['optimal_compositions'] = optimal_compositions
        
        return trends
    
    def analyze_with_ai(self, user_query):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ò–ò –∏ ML"""
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ ML –∞–Ω–∞–ª–∏–∑
        data_summary = self.get_data_summary()
        ml_trends = self.analyze_trends_with_ml()
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context = f"""
        –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–ï–õ–õ–ï–¢:
        
        –î–ê–ù–ù–´–ï:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {data_summary.get('total_samples', 0)}
        - –ò—Å—Å–ª–µ–¥—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: {', '.join(data_summary.get('trained_models', []))}
        - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(data_summary.get('available_components', []))}
        
        ML –ê–ù–ê–õ–ò–ó:
        {json.dumps(ml_trends, indent=2, ensure_ascii=False)}
        
        –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_query}
        
        –ü–†–û–ê–ù–ò–õ–ò–ó–ò–†–£–ô –¥–∞–Ω–Ω—ã–µ –∏ ML —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Å—è—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ - –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ ML –º–æ–¥–µ–ª–µ–π.
        –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        """
        
        try:
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            ai_response = ask_ai(context)
            
            # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏–∑ ML –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            optimal_composition = {}
            if 'optimal_compositions' in ml_trends and 'q' in ml_trends['optimal_compositions']:
                optimal_composition = ml_trends['optimal_compositions']['q']
            
            return {
                'analysis': ai_response,
                'recommendations': "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ ML –º–æ–¥–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö",
                'optimal_composition': optimal_composition
            }
            
        except Exception as e:
            # –ï—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            return self._local_analysis(user_query, data_summary, ml_trends)
    
    def _local_analysis(self, user_query, data_summary, ml_trends):
        """–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        analysis = "üîç **–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –º–æ–¥–µ–ª–µ–π:**\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if 'component_impact' in ml_trends:
            analysis += "**–í–ª–∏—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞:**\n"
            for prop, components in ml_trends['component_impact'].items():
                analysis += f"- {prop}: {', '.join([f'{comp}({imp:.2f})' for comp, imp in components])}\n"
            analysis += "\n"
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã
        if 'optimal_compositions' in ml_trends:
            analysis += "**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã:**\n"
            for prop, composition in ml_trends['optimal_compositions'].items():
                valid_components = {k: v for k, v in composition.items() if v > 1}
                if valid_components:
                    analysis += f"- –î–ª—è {prop}: {', '.join([f'{k} {v}%' for k, v in valid_components.items()])}\n"
        
        return {
            'analysis': analysis,
            'recommendations': "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ò–ò API",
            'optimal_composition': ml_trends.get('optimal_compositions', {}).get('q', {})
        }